diff --git a/tls110/cipher_suites.go b/tls110/cipher_suites.go
index beb0f19..89979ab 100644
--- a/tls110/cipher_suites.go
+++ b/tls110/cipher_suites.go
@@ -15,7 +15,7 @@ import (
 	"crypto/x509"
 	"hash"
 
-	"golang_org/x/crypto/chacha20poly1305"
+	"golang.org/x/crypto/chacha20poly1305"
 )
 
 // a keyAgreement implements the client and server side of a TLS key agreement
diff --git a/tls110/common.go b/tls110/common.go
index 646b107..cec4b98 100644
--- a/tls110/common.go
+++ b/tls110/common.go
@@ -7,7 +7,6 @@ package tls
 import (
 	"container/list"
 	"crypto"
-	"crypto/internal/cipherhw"
 	"crypto/rand"
 	"crypto/sha512"
 	"crypto/x509"
@@ -19,6 +18,8 @@ import (
 	"strings"
 	"sync"
 	"time"
+
+	"github.com/sullivanmatt/check.tls.support/tls110/cipherhw"
 )
 
 const (
@@ -83,6 +84,9 @@ const (
 	extensionSessionTicket       uint16 = 35
 	extensionNextProtoNeg        uint16 = 13172 // not IANA assigned
 	extensionRenegotiationInfo   uint16 = 0xff01
+
+	// added for howsmyssl's early TLS 1.3 support
+	extensionSupportedVersions uint16 = 43
 )
 
 // TLS signaling cipher suite values
@@ -169,6 +173,14 @@ type ConnectionState struct {
 	// change in future versions of Go once the TLS master-secret fix has
 	// been standardized and implemented.
 	TLSUnique []byte
+
+	// Added for howsmyssl's use
+	ClientCipherSuites               []uint16
+	CompressionMethods               []uint8
+	NMinusOneRecordSplittingDetected bool
+	AbleToDetectNMinusOneSplitting   bool
+	SessionTicketsSupported          bool
+	SupportedVersions                []uint16
 }
 
 // ClientAuthType declares the policy the server will follow for
diff --git a/tls110/conn.go b/tls110/conn.go
index 31c5053..da79773 100644
--- a/tls110/conn.go
+++ b/tls110/conn.go
@@ -104,6 +104,12 @@ type Conn struct {
 	activeCall int32
 
 	tmp [16]byte
+
+	// Added for howsmyssl's use
+	clientHello                      *clientHelloMsg
+	ableToDetectNMinusOneSplitting   bool
+	readOneAppDataRecord             bool
+	nMinusOneRecordSplittingDetected bool
 }
 
 // Access to net.Conn methods.
@@ -667,6 +673,19 @@ Again:
 		c.warnCount = 0
 	}
 
+	// This detects BEAST mitigation when the first app data record is
+	// of length 1 or 0. Length 1 mitigation is common in web browsers, while
+	// length 0 is common in OpenSSL tools. Since the requests to
+	// /a/check are typically very small, this won't detect the Java
+	// style BEAST mitigation where the 1 byte record is sent after
+	// the first application record but only if its large enough.
+	//
+	// TODO(sullivanmatt): check that 1 or 0 byte records are sent between others
+	if !c.readOneAppDataRecord && c.ableToDetectNMinusOneSplitting && want == recordTypeApplicationData {
+		c.readOneAppDataRecord = true
+		c.nMinusOneRecordSplittingDetected = len(data) == 1 || len(data) == 0
+	}
+
 	switch typ {
 	default:
 		c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
@@ -1376,6 +1395,14 @@ func (c *Conn) ConnectionState() ConnectionState {
 				state.TLSUnique = c.serverFinished[:]
 			}
 		}
+		state.ClientCipherSuites = make([]uint16, len(c.clientHello.cipherSuites))
+		copy(state.ClientCipherSuites, c.clientHello.cipherSuites)
+		state.CompressionMethods = make([]uint8, len(c.clientHello.compressionMethods))
+		copy(state.CompressionMethods, c.clientHello.compressionMethods)
+		state.AbleToDetectNMinusOneSplitting = c.ableToDetectNMinusOneSplitting
+		state.NMinusOneRecordSplittingDetected = c.nMinusOneRecordSplittingDetected
+		state.SessionTicketsSupported = c.clientHello.ticketSupported
+		state.SupportedVersions = c.clientHello.supportedVersions
 	}
 
 	return state
diff --git a/tls110/handshake_client.go b/tls110/handshake_client.go
index e5e0df2..ff3281c 100644
--- a/tls110/handshake_client.go
+++ b/tls110/handshake_client.go
@@ -66,6 +66,14 @@ func makeClientHello(config *Config) (*clientHelloMsg, error) {
 NextCipherSuite:
 	for _, suiteId := range possibleCipherSuites {
 		for _, suite := range cipherSuites {
+			// Explicitly whitelisting some meta cipher suites as okay to be
+			// used in TestSweet32 in howsmyssl's client config
+
+			if suiteId == 0x00FF || suiteId == 0x0A0A {
+				hello.cipherSuites = append(hello.cipherSuites, suiteId)
+				continue NextCipherSuite
+			}
+
 			if suite.id != suiteId {
 				continue
 			}
diff --git a/tls110/handshake_messages.go b/tls110/handshake_messages.go
index f8c8d57..460b27b 100644
--- a/tls110/handshake_messages.go
+++ b/tls110/handshake_messages.go
@@ -28,6 +28,9 @@ type clientHelloMsg struct {
 	secureRenegotiation          []byte
 	secureRenegotiationSupported bool
 	alpnProtocols                []string
+
+	// added for howsmyssl's early TLS 1.3 support
+	supportedVersions []uint16
 }
 
 func (m *clientHelloMsg) equal(i interface{}) bool {
@@ -496,6 +499,22 @@ func (m *clientHelloMsg) unmarshal(data []byte) bool {
 			if length != 0 {
 				return false
 			}
+		case extensionSupportedVersions:
+			// https://tools.ietf.org/html/draft-ietf-tls-tls13-18#section-4.2.1
+			if length < 1 {
+				return false
+			}
+			l := int(data[0])
+			if l%2 == 1 || length != l+1 {
+				return false
+			}
+			n := l / 2
+			d := data[1:]
+			for i := 0; i < n; i++ {
+				v := uint16(d[0])<<8 + uint16(d[1])
+				m.supportedVersions = append(m.supportedVersions, v)
+				d = d[2:]
+			}
 		}
 		data = data[length:]
 	}
diff --git a/tls110/handshake_server.go b/tls110/handshake_server.go
index 991b4e9..529e565 100644
--- a/tls110/handshake_server.go
+++ b/tls110/handshake_server.go
@@ -103,6 +103,7 @@ func (c *Conn) serverHandshake() error {
 			return err
 		}
 	}
+	c.clientHello = hs.clientHello
 	c.handshakeComplete = true
 
 	return nil
@@ -243,22 +244,41 @@ Curves:
 		}
 	}
 
-	if hs.checkForResumption() {
+	// Disallow resumption when client is at TLS 1.0 or below so that
+	// we can be sure the checks for HasBeastVulnSuites is set
+	// correctly. A latency and CPU hit, but tolerable for accuracy.
+	if hs.clientHello.vers > VersionTLS10 && hs.checkForResumption() {
 		return true, nil
 	}
+	if hs.clientHello.vers <= VersionTLS10 {
+		for _, cs := range hs.clientHello.cipherSuites {
+			if cs == TLS_RSA_WITH_AES_128_CBC_SHA || cs == TLS_RSA_WITH_AES_256_CBC_SHA || cs == TLS_RSA_WITH_AES_128_CBC_SHA256 {
+
+				if hs.setCipherSuite(cs, c.config.cipherSuites(), c.vers) {
+					c.ableToDetectNMinusOneSplitting = true
+					break
+				}
+			}
+		}
 
-	var preferenceList, supportedList []uint16
-	if c.config.PreferServerCipherSuites {
-		preferenceList = c.config.cipherSuites()
-		supportedList = hs.clientHello.cipherSuites
-	} else {
-		preferenceList = hs.clientHello.cipherSuites
-		supportedList = c.config.cipherSuites()
 	}
 
-	for _, id := range preferenceList {
-		if hs.setCipherSuite(id, supportedList, c.vers) {
-			break
+	// If we didn't already call setCipherSuite for the BEAST vuln detection, do
+	// the usual stuff.
+	if hs.suite == nil {
+		var preferenceList, supportedList []uint16
+		if c.config.PreferServerCipherSuites {
+			preferenceList = c.config.cipherSuites()
+			supportedList = hs.clientHello.cipherSuites
+		} else {
+			preferenceList = hs.clientHello.cipherSuites
+			supportedList = c.config.cipherSuites()
+		}
+
+		for _, id := range preferenceList {
+			if hs.setCipherSuite(id, supportedList, c.vers) {
+				break
+			}
 		}
 	}
 
diff --git a/tls110/key_agreement.go b/tls110/key_agreement.go
index 3f570b6..135e7c1 100644
--- a/tls110/key_agreement.go
+++ b/tls110/key_agreement.go
@@ -17,7 +17,7 @@ import (
 	"io"
 	"math/big"
 
-	"golang_org/x/crypto/curve25519"
+	"golang.org/x/crypto/curve25519"
 )
 
 var errClientKeyExchange = errors.New("tls: invalid ClientKeyExchange message")
